package pow

import "testing"

func TestSolver(t *testing.T) {
	testcases := []struct {
		Prefix          string
		Difficulty      int
		ExpAttempts     int
		ExpBinaryString string
	}{
		{
			Prefix:          "asd",
			Difficulty:      5,
			ExpAttempts:     25,
			ExpBinaryString: "0000011110100000010111100001001100010011011110100000000110111000111111010001011001110000010110110011000101111010000000101011000111010110111011010011111000010000110110000001111111111011100100100010100111011010100000100011001110101100100101110001010001100101",
		},
		{
			Prefix:          "zxcasdqwe",
			Difficulty:      5,
			ExpAttempts:     4,
			ExpBinaryString: "0000010100100011011100000010101101010010101010110101000101110100000010111010110011000111010011100011110111100111000110001100111011011101110111001110000001110111100010100000000111100110000000101101100100011110000001011000111001001111011110011010110010101101",
		},
		{
			Prefix:          "zxcasdqwe",
			Difficulty:      10,
			ExpAttempts:     128,
			ExpBinaryString: "0000000000110101001110101001011101101011011000011000001101001000110010111111111110100101110111100100100001100101111100011110001101010110011111011101110100001111111000010101100110000101101101001000010010011110011010110101110011100000010011001010000110101000",
		},
		{
			Prefix:          "zxcasdqwe",
			Difficulty:      16,
			ExpAttempts:     25518,
			ExpBinaryString: "0000000000000000100111001111011100110001001100110111011110001010010001111011010101001101000111000010011000111111010111001101011000100011001101110010000100100000001111101000110010111000011000100101010111101000010000101110111110110110101101110010110110101010",
		},
		{
			Prefix:          "zxcasdqwe",
			Difficulty:      17,
			ExpAttempts:     273604,
			ExpBinaryString: "0000000000000000000101100000100000111110011000000100011000100010111110100011100101100111110001111000001011001111111110111111101111100010001000111011111010011110111100011101110011110011000111100001111111000000010001001100101101111011011101011111101010010001",
		},
	}

	for _, c := range testcases {
		s, _ := New(SolverConfig{
			Prefix:     c.Prefix,
			Difficulty: c.Difficulty,
		})
		a, b := s.Solve()
		if a != c.ExpAttempts {
			t.Errorf("\nGot:\n%v\nShould be:\n%v", a, c.ExpAttempts)
		}
		if b != c.ExpBinaryString {
			t.Errorf("\nGot:\n%s\nShould be:\n%s!", b, c.ExpBinaryString)
		}
	}
}
